//
// Created by Alberto Casas Ortiz.
//

#ifndef INDIVIDUAL_H

    #include <vector>
    #include <string>

#define INDIVIDUAL_H


/**
 * Individual of the Genetic Algorithm.
 */
class Individual {
private:
    /** Parameters of the individual, in this case a set of integers. */
    std::vector<int>* chromosome;
    /** Fitness of the individual. */
    double fitness;
    /** Expression generated by the individual. */
    std::string expression;
    /** Probability of selection of the individual. */
    double probability;
    /** Accumulated probability of selection of the individual. */
    double accumulatedProbability;
    /** Age of the individual. */
    int age;
public:
    /**
     * Constructor for class Individual.
     */
    Individual();

    /**
     * Destructor for class Individual.
     */
    ~Individual();

    /**
     * Initialize the individual randomly.
     */
    void initialize();

    /**
     * Evaluate the individual and get it fitness.
     */
    void evaluate();

    /**
     * Get fenotype of the individual. The fenotype is the result of evaluate the values of x of the problem with the
     * expression generated by the individual.
     * @return Result of evaluate the expression generated by the individual with the x values of the problem.
     */
    std::vector<double>* getFenotype();

    /**
     * Size of the chromosome of the Individual.
     * @return Size of the chromosome of the Individual.
     */
    int sizeOf();

    /**
     * Get age of the individual.
     * @return Age of the individual.
     */
    int getAge();

    /**
     * Increase age of the individual.
     */
    void increaseAge();

    /**
     * Get the chromosome of the individual.
     * @return Chromosome of the individual.
     */
    std::vector<int>* getChromosome();

    /**
     * Add a codon to the chromosome.
     * @param object Codon to add.
     */
    void addCodon(int object);

    /**
     * Get probability of selection of the Individual.
     * @return Probability of selection of the Individual.
     */
    double getProbability();

    /**
     * Set probability of selection of the Individual.
     * @param probability Probability of selection of the Individual.
     */
    void setProbability(double probability);

    /**
     * Get accumulated probability of selection of the Individual.
     * @return Accumulated probability of selection of the Individual.
     */
    double getAccumulatedProbability();

    /**
     * Set accumulated probability of selection of the Individual.
     * @param accumulatedProbability Accumulated probability of selection of the Individual.
     */
    void setAccumulatedProbability(double accumulatedProbability);

    /**
     * Set probabilities of the Individual.
     * @param probability Probability of selection of the Individual.
     * @param accumulatedProbability Accumulated probability of selection of the Individual.
     */
    void setProbabilities(double probability, double accumulatedProbability);

    /**
     * Get fitness of the individual.
     * @return Fitness of the individual.
     */
    double getFitness();

    /**
     * Set fitness of the Individual.
     * @param fitness Fitness of the Individual.
     */
    void setFitness(double fitness);

    /**
     * Get expression generated by the Individual.
     * @return Expression generated by the Individual.
     */
    std::string getExpression();

    /**
     * Get a copy of this Individual. (Deep copy).
     * @return Copy of this Individual. (Deep copy).
     */
    Individual* copy();

    /**
     * Get String representation of the Individual.
     * @return String representation of the Individual.
     */
    std::string toString();

};


#endif //INDIVIDUAL_H
